---
layout: post
title:  In the bright new future of today, history goes in history
date:   2017-03-20 23:30:00 -0000
author: MRA
---

Working on a project with as much history as NTP brings to light just
how much history there is, in preserving history.

== My history of using history

Year ago, when I was working for MySQL AB, one of my projects was to
write a specialized storage engine for a specific customer.  Before I
started from scratch, I chatted with some of the senior developers who
had been working on that codebase from the very beginning, describing
what this new code had to do.

Old Master: "Oh, that's very similar to the old foobar engine, use
that as your starting point."

Me: "I've never heard of the foobar engine, it's not in any of the
docs, and I've never seen it in the code."

Old Master: "Oh, we removed it, years ago.  But it will be in the VCS
history, grab it from there."

Me: ...

Sure enough, I walked back in time in the VCS, and there was the
foobar engine.  It did not compile against the current state of the
project, but half a week's work fixed that, and another week's work
modified it to meet the requirements for this custom engine project.

This saved me months, instead of writing the new custom engine from
scratch.


We've gotten used to using VCSs, such as Git, but we still have not
fully realized what having a VCS does: we can remember the past
without it intruding on the present unncessarily.

== Removing without fear, restoring without pain

As we started working on refactoring the NTP codebase, one of our key
metrics of progress is how much the code is shrinking.  ESR has
written a blog post
(https://blog.ntpsec.org/2016/11/29/less-is-more.html)
about the
removals, and how removing it was a win for the tractiblity of the
project, by reducding the cognative load required.

Sometimes we removed too much, we would bring some stuff back.  Which
we could do because it was all sitting in the history.  Removing too
much is an low-cost easily reversed error.

== Onlookers are concerned, they needn't be

Some people watching us work from the outside have been saying
that we are going too far, we are removing stuff that is harmless,
or that hasn't been shown to have bugs or security issues.

Theirconcern is fueled by the reality that writing code is hard work,
that someone sweated expensive time and scares attention over writing
that code, and it's wrong to throw away something valuable.

While I understand their concern, and completely share it, again I
think their concern is a demonstration that we the open source
communities have not yet really actually understood what it really
means to have a VCS.  All that stuff is not "gone", it's not "lost".
It's still sitting in the VCS history, with a copies everywhere that
someone has run "git clone".

== The past's future hopes go in history, not the present

As we dug in deeply into NTPsec, we started finding half-done projects
and experiments, things that were never finished, or that never
worked, or that were never used and were insecure.

The NTP developers had some brilliant ideas, and they had some half
baked ideas.  Maybe those ideas could have been baked into brilliance,
but for whatever reason, they didn't get finished.

The amazing thing about Git, that we often forget that makes it so
different from most ealier VCSs, is local feature branches. Before
Git, feature branches were difficult.  Before VCS, they basically were
impossible.

And so, instead of feature branches, projects as old and as active as
NTP routinely shipped with code that was, at best, #ifdef'ed out as
"under construction", and at work, shipped incomplete and documented
with "don't use this, it's not done".  Not from any failure on the
part of the NTP developers, but just because of the weaknesses in the
tools that older developers learned on.

== Make way for tomorrow, today

The NTPsec project's current use of Git is still very straightforward,
and without a lot of advanced "git-fu".  But I think that will change,
as we get more developers who don't need "master commit" powers.  We
will get more and more feature branches, that get merged to the
'master' branch after code review.

But in the meantime, we will live the history in the history, where it
belongs.

// END
